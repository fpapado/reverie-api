TODO:
Category > admin_only
Category :index > load all (if current_user.is_admin) or user only
Sticker :create > if category.admin_only then must sender.is_admin. Halt in changeset or interface? Probably interface, right?

Edit user if the same

Encode (permission?) in Guardian
Do not show is_admin on index

Try out ex_admin

Try out coherence:
  Confirmation
  field has_confirmed, :boolean default: false

Have a list of authorised emails; check in changeset

Add tests to:
Check is_admin cannot be set
Check username is unique

Next:
- Authorisation
  - Admin, roles, authorisation
  - Admin stickers ("permission")

- Editing / deleting
  - Add actions for stickers
  - Add actions for profile

- User schema update
  - username (filter on signup changeset?)
  - has_confirmed?

:admin can edit users (later)

- Signup flow
  - Permitted domains / emails
  - Confirmation email ("has_confirmed")

- "Message of the day"
  - GET /motd
  - Calculate motd for the date, return it
  - date: Date, message: String

Later:

- Handle/present sent stickers for a user. Delete?
- Name / Surname
- Pull default author name if logged in to app
- Decide on json-api view structure;
  is there a single view we could use instead of our own defs?

- Figure out indexes, especially for stickers (sender, receiver, category)

- decide where to put default includes (DSL vs controller)
- decide whether those includes should be default
  - Currently, we include them anyway in Ember, even if not needed.
    Easier to change without breaking

- Alternative to build_..._relationship. Can we do it with jsonapi? Maybe mixed with build_assoc()?
  - Or cast_assoc...

- Code for events, limit user stickers to them
  - "Realms" / "Domains"

- use json-api serialization
- consistent pluralization in serializing,
- consistent pluralization in controllers,
- consistent pluralization in Ember,
- show.json-api deprecation,

- Categories: add long-form message / explanation?
- Open or closed indexing of users?

- add references to children in parent schemas (+migration for db table)
- add assoc_constraint([:sender, :receiver]),
    see: https://hexdocs.pm/ecto/Ecto.Changeset.html#assoc_constraint/3

- [Feature] Add "hidden" sticker categories, that are awarded by admins
- build_receiver_relationship handle function not found
  (we don't need to, I suppose, but rendering errors is nice)
  - Alternatively, pass on an invalid id if not found, and let the changeset assoc_constraint deal with the error?
- Sticker message consider, max 150 chars
